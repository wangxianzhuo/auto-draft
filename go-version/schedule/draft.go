package schedule

import (
	"io/ioutil"
	"log"
	"os"
	"time"
)

// AutoGenerateDraft is a implenment of Task to generate draft
type AutoGenerateDraft struct {
	Path        string
	Suffix      string
	DefaultName string
}

func NewAutoGenerateDraft(path, suffix, defaultName string) (*AutoGenerateDraft, error) {
	_, err := ioutil.ReadDir(path)
	if err != nil {
		log.Println("create the dir: " + path)
		err = os.Mkdir(path, 0777)
	}
	if suffix == "" {
		suffix = ".txt"
	}
	if defaultName == "" {
		defaultName = "current"
	}
	g := AutoGenerateDraft{Path: path, Suffix: suffix, DefaultName: defaultName}
	return &g, nil
}

func (t *AutoGenerateDraft) Start() {
	err := t.createCurrentDraft()
	if err != nil {
		log.Printf("generate draft error: %v\n", err)
		return
	}
}

func (t *AutoGenerateDraft) createCurrentDraft() error {
	currentPath := t.Path + "/" + t.DefaultName
	_, err := os.Stat(currentPath + t.Suffix)
	if err == nil {
		now := time.Now().Format("2006-01-02")
		err = renameFile(currentPath, t.Path+"/"+now, t.Suffix)
		if err != nil {
			return err
		}
	}
	log.Println("create " + t.DefaultName + t.Suffix)
	file, err := os.Create(currentPath + t.Suffix)
	if err != nil {
		return err
	}
	defer file.Close()
	return nil
}

func renameFile(oldPath, newPath, suffix string) error {
	_, err := os.Stat(newPath + suffix)
	if err == nil {
		err = renameFile(newPath, newPath+"_1", suffix)
		if err != nil {
			return err
		}
	}
	err = os.Rename(oldPath+suffix, newPath+suffix)
	if err != nil {
		return err
	}
	log.Println("rename " + oldPath + suffix + " to " + newPath + suffix)
	return nil
}
